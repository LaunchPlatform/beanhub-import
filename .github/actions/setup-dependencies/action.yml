---
name: Install Python dependencies with PDM

# https://pdm-project.org/en/latest/

# poetry is assumed to be installed in the runner environment
# in our case this is done by mise and .tool-versions

description: installs dependancies

runs:
  using: "composite"

  steps:
    - name: Get Configured Cache Dir
      shell: bash
      id: get-cache-dir
      run: |
        echo "PdmCacheDir=$(pdm config cache_dir)" >> $GITHUB_OUTPUT

    - name: Cache PDM
      id: pdm-cache
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          .venv
          __pypackages__
          ${{ steps.get-cache-dir.outputs.PdmCacheDir }}

        key: pdm-cache-${{ runner.os }}-${{ runner.arch }}-python-${{ hashFiles('.tool-versions') }}-${{ hashFiles('**/pdm.lock') }}
        restore-keys: |
          pdm-cache-${{ runner.os }}-${{ runner.arch }}-python-${{ hashFiles('.tool-versions') }}-${{ hashFiles('**/pdm.lock') }}
          pdm-cache-${{ runner.os }}-${{ runner.arch }}-python-${{ hashFiles('.tool-versions') }}-
          pdm-cache-${{ runner.os }}-${{ runner.arch }}-python-

    # Install dependencies. `--no-root` means "install all dependencies but not the project
    # itself", which is what you want to avoid caching _your_ code. The `if` statement
    # ensures this only runs on a cache miss.
    - shell: bash
      if: steps.pdm-cache.outputs.cache-hit != 'true'
      run: pdm install

    # Now install _your_ project. This isn't necessary for many types of projects -- particularly
    # things like Django apps don't need this. But it's a good idea since it fully-exercises the
    # pyproject.toml and makes that if you add things like console-scripts at some point that
    # they'll be installed and working.
    - shell: bash
      run: pdm install --frozen-lockfile

    - shell: bash
      run: echo "$PWD/.venv/bin" >> $GITHUB_PATH
